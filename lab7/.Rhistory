selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, color = "Species")) +
geom_point() +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv", na = c("", "NA", "\\"))
homerange
names(homerange)
homerange%>%
summarise(locomotion)
homerange%>%
filter(locomotion)
homerange
homerange%>%
ggplot(aes(x=locomotion, fill=trophic.guild))+
geom_bar(position="dodge")
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("swimming", "flying", "walking"),
selected = "swimming"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = input$x, y = input$y, fill = trophic.guild)) +
geom_bar() +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
homerange%>%
ggplot(aes(x=locomotion, fill=trophic.guild))+
geom_bar(position="dodge")
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("swimming", "flying", "walking"),
selected = "swimming"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = input$x, y = input$y, fill = "trophic.guild")) +
geom_bar() +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
homerange%>%
ggplot(aes(x=locomotion, fill=trophic.guild))+
geom_bar(position="dodge")
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = input$x, y = input$y, fill = "locomotion")) +
geom_bar() +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
homerange%>%
ggplot(aes(x=locomotion, fill=trophic.guild))+
geom_bar(position="dodge")
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = locomotion,fill = input$x)) +
geom_bar() +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
homerange%>%
ggplot(aes(x=locomotion, fill=trophic.guild))+
geom_bar(position="dodge")
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion",fill = input$x)) +
geom_bar() +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion",fill = input$x)) +
geom_bar(position="dodge") +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
homerange
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion",fill = input$x)) +
geom_bar(position="dodge") +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Locomotion"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("locomotion", " Select Locomotion of Interest:",
choices=unique(homerange$locomotion)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("LocomotionPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(locomotion == input$locomotion) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Locomotion"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("locomotion", " Select Locomotion of Interest:",
choices=unique(homerange$locomotion)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("LocomotionPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$locomotionPlot <- renderPlot({
homerange %>%
filter(locomotion == input$locomotion) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Locomotion"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("locomotion", " Select Locomotion of Interest:",
choices=unique(homerange$locomotion)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("LocomotionPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$LocomotionPlot <- renderPlot({
homerange %>%
filter(locomotion == input$locomotion) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion",fill = input$x)) +
geom_bar(position="dodge") +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("tidyverse")
library("shiny")
library("naniar")
runApp('HomeRangeApp.R')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("tidyverse")
library("shiny")
library("naniar")
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)##stop app when web browser closes
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point() + theme_light(base_size = 18)
})
}
shinyApp(ui, server)
library("tidyverse")
library("shiny")
library("naniar")
install.packages("shinydashboard")
library(("shinydashboard"))
library("tidyverse")
library("shiny")
library("naniar")
install.packages("shinydashboard")
library(("shinydashboard"))
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)##stop app when web browser closes
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point() + theme_light(base_size = 18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
sliderInput("fontsize", "Select the Font Size", min = 10, max = 24, value = 18, step = 1),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point() + theme_light(base_size = input$fontsize)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <-
dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
gabon <- readr::read_csv("data/IvindoData_DryadVersion.csv")
gabon <- readr::read_csv("data/IvindoData_DryadVersion.csv")
gabon
names(gabon)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("RA_Birds", "RA_Monkeys","RA_Elephants","RA_Ungulates","RA_Rodents"),
selected = "RA_Birds"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) +
geom_jitter()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("RA_Birds", "RA_Monkeys","RA_Elephants","RA_Ungulates","RA_Rodents"),
selected = "RA_Birds"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) +
geom_jitter()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("RA_Birds", "RA_Monkeys","RA_Apes","RA_Elephants","RA_Ungulates","RA_Rodents"),
selected = "RA_Birds"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) +
geom_jitter()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("RA_Birds", "RA_Monkeys","RA_Apes","RA_Elephant","RA_Ungulate","RA_Rodent"),
selected = "RA_Birds"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) +
geom_jitter()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("RA_Birds", "RA_Monkeys","RA_Apes","RA_Elephant","RA_Ungulate","RA_Rodent"),
selected = "RA_Birds"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) +
geom_jitter()+geom_smooth()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("RA_Birds", "RA_Monkeys","RA_Apes","RA_Elephant","RA_Ungulate","RA_Rodent"),
selected = "RA_Birds"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) +
geom_jitter()+geom_quantile()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("RA_Birds", "RA_Monkeys","RA_Apes","RA_Elephant","RA_Ungulate","RA_Rodent"),
selected = "RA_Birds"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) +
geom_jitter()+geom_smooth()
})
}
shinyApp(ui, server)
ui <- fluidPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Birds", "RA_Monkeys","RA_Apes","RA_Elephant","RA_Ungulate","RA_Rodent"),
selected = "RA_Birds"),
plotOutput("plot", width = "500px", height = "400px")
))))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) +
geom_jitter()+geom_smooth()
})
}
shinyApp(ui, server)
ui <- fluidPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Birds", "RA_Monkeys","RA_Apes","RA_Elephant","RA_Ungulate","RA_Rodent"),
selected = "RA_Birds"),
plotOutput("plot", width = "500px", height = "400px")
))))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) +
geom_jitter()+geom_smooth()
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny); runApp('Hw 7A.R')
runApp('Hw 7A.R')
runApp('Hw 7B.R')
